@page "/signin"
@using Festivalproject.Shared.Models;
@using Festivalproject.Client.Services;
@using Microsoft.AspNetCore.Components.Forms;
@using Festivalproject.Client.Components;

@inject HttpClient Http;
@inject NavigationManager navigationManager;
@inject ILoginService loginService;
@inject IUserService userService;


<!-- Implementing a login form with two inputfields. Styled with tailwind css.
The form binds inputvalue to local variables, which then are passed to be validated via Login() method
-->
@if (isLoading)
{
    <div class="full-screen-overlay"></div>
    <div class="loader-container">
        <span class="loader"></span>
    </div>

}
else
{
    <div class="card-deck">
    </div>
}
<div class="flex min-h-full flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 class="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">Log ind</h2>
        <p class="mt-2 text-center text-sm text-gray-600"> </p>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div class="bg-white px-4 py-8 shadow sm:rounded-lg sm:px-10">
            <form class="space-y-6">
                <div>
                    <label for="username" class="block text-sm font-medium leading-6 text-gray-900">Brugernavn</label>
                    <div class="mt-2">
                        <input @bind="yourUsername" id="username" name="username" type="username" autocomplete="username" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 "/>
                    </div>
                </div>
                <div>
                    <label for="password" class="block text-sm font-medium leading-6 text-gray-900">Adgangskode</label>
                    <div class="mt-2">
                        <input @bind="yourPassword" id="password" name="password" type="password" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"/>
                    </div>
                </div>
                <div class="flex items-center justify-between">
                </div>
                <button type="button" @onclick="Submit" class="flex w-full mb-8 justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Log ind</button>
            </form>

            <div>
                <p class=" mb-2 mt-2 text-center"> eller </p>
                <button @onclick="RegistrerUser" class="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" data-toggle="modal" data-target="#exampleModalCenter">Opret bruger</button>
            </div>

            <div class="mt-6">
                <div class="relative">
                    <div class="absolute inset-0 flex items-center">
                        
                    </div>
                </div>
            </div>
            <p class="text-xl text-center text-rose-400">@message</p>
            <p class="text-xl text-center text-rose-400">@message2</p>
        </div>
    </div>
</div>




@code {

    //Local variables 
    private string yourUsername { get; set; } = "";
    private string yourPassword { get; set; } = "";
    private string id { get; set; } = "";
    private string message { get; set; } = "";
    private string message2 { get; set; } = "";
    private LoginDataDTO loginData { get; set; } = new();
    private bool isLoading { get; set; } = false;



    // Mehtod called by click on login button. Method checks if input fields are empty, and returns an "error" message. If not empty
    //...method proceeds to call Login() method. 
    private async Task Submit()
    {
      
        if (string.IsNullOrEmpty(yourUsername) || string.IsNullOrEmpty(yourPassword))
        {
            // Display an error message or handle the validation as desired
            message = "Brugernavn og kodeord er påkrævet.";
            return;
        }
        else
        {
            message = "";
            isLoading = true;
            await Login();
            isLoading = false;
        }
    }


    //Method that fetches a Loginresult object, and checks result for null value. Based on response method redirects user to 
    //.. new page,based on usertype (coordinator or volunteer), using injected nagivationmanager 
    public async Task Login()
    {
        loginData.Username = yourUsername;
        loginData.Password = yourPassword;
        var result = await loginService.GetLoginResult(loginData);


        if (result != null && result.UserType == "Volunteer")
        {
            var id = result.ObjectId;
            navigationManager.NavigateTo("/volunteer?id=" + id);
        }
        else if (result != null && result.UserType == "Coordinator")
        {
            var id = result.ObjectId;
            navigationManager.NavigateTo("/coordinator?id=" + id);
        }
        else
        {
            message = "Brugernavn eller kodeord er forkert eller findes ikke.";
            yourUsername = "";
            yourPassword = "";
            id = " ";
        }
    }

    //Method that redirects user to a signup-page on buttonclick using nagivationmanager 
    public async Task RegistrerUser()
    {
        navigationManager.NavigateTo("/registrer");
    }







}