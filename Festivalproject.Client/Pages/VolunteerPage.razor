@page "/volunteer"
@using Festivalproject.Shared.Models;
@using Festivalproject.Client.Services;
@inject IShiftRegistrationService ShiftRegistrationService
@inject HttpClient Http;
@inject IUserService userService;
@inject NavigationManager navigationManager;
@using Festivalproject.Client.Components;
@using Blazored.Modal.Services;


<!-- Implementing header with image at top of userprofile page  -->
<div>
  <div>
    <img class="h-32 w-full object-cover lg:h-48" src="/confettiHeader.jpg" alt="">
  </div>
  <div class="mx-auto max-w-5xl px-4 sm:px-6 lg:px-8">
    <div class="-mt-12 sm:-mt-16 sm:flex sm:items-end sm:space-x-5">
      <div class="flex">
        <img class="h-24 w-24 rounded-full ring-4 ring-white sm:h-32 sm:w-32" src="/ProfileHead.png" alt="">
      </div>
      <div class="mt-6 sm:flex sm:min-w-0 sm:flex-1 sm:items-center sm:justify-end sm:space-x-6 sm:pb-1">
        <div class="mt-6 min-w-0 flex-1 sm:hidden md:block">
          <h1 class="truncate text-2xl font-bold text-gray-900">@user.FirstName @user.SurName</h1>
        </div>
      </div>
    </div>
    <div class="mt-6 hidden min-w-0 flex-1 sm:block md:hidden">
      <h1 class="truncate text-2xl font-bold text-gray-900">@user.FirstName @user.SurName</h1>
    </div>
  </div>
</div>

<div class="sm:container sm:mx-auto">
    <h4 class="mt-24 text-3xl"> Velkommen @user.FirstName! </h4>
    <h3 class="mt-8  text-lg text-gray-700">Her kan du se og ændre dine oplysninger, tilmelde dig frivillige-vagter og se de vagter du allerede er tilmeldt!</h3>

   
    

    <!-- Adding a table for displyaing userinformation. We are using an If statement as a switch to display either 1) static data  or 2) dynamic editable data using inputfields -->
    @if (!EditMode)
    {
        <div class="px-4 sm:px-6 lg:px-8">
            <div class="sm:flex sm:items-center">
                 <h4 class="mt-5 mb-8 text-2xl"> Dine oplysninger </h4>   
                <div class="sm:flex-auto">
                </div>
                <div class="mt-3 sm:ml-16 sm:mt-0 sm:flex-none">
                    <button type="button" @onclick="Edit" class="block rounded-md bg-indigo-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Rediger oplysninger</button>
                </div>
            </div>
            <div class="mt-8 flow-root">
                <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                    <div class="inline-block min-w-full py-2 align-middle">
                        <table class="min-w-full divide-y divide-gray-300">
                            <thead>
                            <tr>
                                <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6 lg:pl-8">Navn</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Efternavn</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Adresse</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">By</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Postnummer</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Telefonnummer</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Brugernavn</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Epost</th>
                                <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6 lg:pr-8">

                                </th>
                            </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200 bg-white">
                            <tr>
                                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-500 sm:pl-6 lg:pl-8">@user.FirstName</td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@user.SurName</td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@user.Address</td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@user.City</td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@user.Zip</td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@user.PhoneNumber</td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@user.UserName</td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@user.Email</td>
                                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6 lg:pr-8">
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="px-4 sm:px-6 lg:px-8">
            <EditForm Model="@userUpdated" OnValidSubmit="HandleValidSubmit">
               <DataAnnotationsValidator />
            <div class="sm:flex sm:items-center">
                <div class="sm:flex-auto">
                </div>
                <div class="mt-4 mb-24 sm:ml-16 sm:mt-0 sm:flex-none">
                    <button type="submit"  class="block rounded-md bg-indigo-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Gem ændringer</button>
                </div>
            </div>
            <div class="mt-8 flow-root">
                <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                    <div class="inline-block min-w-full py-2 align-middle">
                        <table class="min-w-full divide-y divide-gray-300">
                            <thead>
                                    <ValidationSummary />
                                <tr>
                                    <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6 lg:pl-8">Navn</th>
                                    <th scope="col" class="sticky top-0 z-10 border-b border-gray-300 bg-white bg-opacity-75 py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 backdrop-blur backdrop-filter sm:pl-6 lg:pl-8">Efternavn</th>
                                    <th scope="col" class="sticky top-0 z-10 border-b border-gray-300 bg-white bg-opacity-75 py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 backdrop-blur backdrop-filter sm:pl-6 lg:pl-8">Adresse</th>
                                    <th scope="col" class="sticky top-0 z-10 border-b border-gray-300 bg-white bg-opacity-75 py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 backdrop-blur backdrop-filter sm:pl-6 lg:pl-8">By</th>
                                    <th scope="col" class="sticky top-0 z-10 border-b border-gray-300 bg-white bg-opacity-75 py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 backdrop-blur backdrop-filter sm:pl-6 lg:pl-8">Postnummer</th>
                                    <th scope="col" class="sticky top-0 z-10 border-b border-gray-300 bg-white bg-opacity-75 py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 backdrop-blur backdrop-filter sm:pl-6 lg:pl-8">Telefonnummer</th>
                                    <th scope="col" class="sticky top-0 z-10 border-b border-gray-300 bg-white bg-opacity-75 py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 backdrop-blur backdrop-filter sm:pl-6 lg:pl-8">Brugernavn</th>
                                    <th scope="col" class="sticky top-0 z-10 border-b border-gray-300 bg-white bg-opacity-75 py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 backdrop-blur backdrop-filter sm:pl-6 lg:pl-8">Epost</th>
                                    <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6 lg:pr-8">

                                </th>
                            </tr>
                            </thead>
                                <tbody class="divide-y divide-gray-200 bg-white">

                                    <tr>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <InputText @bind-Value="@userUpdated.FirstName" />
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <InputText @bind-Value="@userUpdated.SurName" />
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <InputText type="text" @bind-Value="@userUpdated.Address" />
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <InputText type="text" @bind-Value="@userUpdated.City" />
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <InputNumber TValue="int" @bind-Value="@userUpdated.Zip"  />
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <InputNumber TValue="int" @bind-Value="@userUpdated.PhoneNumber" />
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <InputText type="text" @bind-Value="@userUpdated.UserName" />
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <InputText type="text" @bind-Value="@userUpdated.Email" />
                                        </td>
                                        <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6 lg:pr-8">
                                        </td>
                                    </tr>
                                </tbody>
                        </table>
                    </div>
                </div>
            </div>
            </EditForm>
        </div>
    }


    <div class="sm:flex sm:items-center">
        <div class="sm:flex-auto">
        </div>
        <div class="mt-4 sm:mr-6 sm:mt-0 sm:flex-none">
            <button type="button" @onclick="NavigateToAvailableShifts" class="block rounded-md bg-indigo-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Se ledige vagter</button>
        </div>
    </div>



    <p class="mt-36 text-2xl">Dine vagter </p>
    <!-- To avoid overabundance of code in this razorpage, we apply use of partial view. See components folder on client  -->
    <ShiftList Shifts="ShiftRegistrations"/>


</div>


@code {

    // Passing the userobjects ObjectId(BSON) from loginpage to be able to fetch userinformation and shiftregistrations by userId
    // Parameter is public since the signingpage needs to access it to passe the value 
    [Parameter]
    [SupplyParameterFromQuery]
    public string? id { get; set; } 

    private User user { get; set; } = new User();
    private User userUpdated { get; set; } = new User();
    private bool EditMode { get; set; } = false;
    private List<ShiftRegistration> ShiftRegistrations { get; set; } = new List<ShiftRegistration>();
    private EditContext editContext { get; set; }



    //On pageload method that awaits a httpget method, for fetching the userinformation of the user
    //Method also awaits all shiftregistrations on that user 
    protected override async Task OnInitializedAsync()
    {
        user = await userService.GetUserByObjectId(id);
        ShiftRegistrations = await ShiftRegistrationService.GetRegisteredShiftsById(id);
        foreach(var shift in ShiftRegistrations)
        {
            shift.StartTime = shift.StartTime.ToLocalTime();
            shift.EndTime = shift.EndTime.ToLocalTime(); 
        }
        editContext = new EditContext(userUpdated);
    }


    //Method that sets the binded inputvalues for userUpdated to user, which is passed to service in "Save" method
    private void Edit()
    {
        EditMode = true;
        userUpdated.FirstName = user.FirstName;
        userUpdated.SurName = user.SurName;
        userUpdated.PhoneNumber = user.PhoneNumber;
        userUpdated.Address = user.Address;
        userUpdated.Zip = user.Zip;
        userUpdated.City = user.City;
        userUpdated.UserName = user.UserName;
        userUpdated.Email = user.Email;
        userUpdated.Password = user.Password;
        userUpdated.UserType = user.UserType;
        userUpdated.Id = user.Id;



    }

    //Method that handles validation, and if form submit is valid calls the SaveUserInfo method
    private async Task HandleValidSubmit()
    {
        if (editContext.Validate())
        {
            await SaveUserInfo();

        }
    }



    //Method that calls the HttpPut method which updates the changed fields in user-document in the database
    //..and sets user to the updated userObject returned by GetUserByObjectId - method, så the updated information is displayed
    private async Task SaveUserInfo()
    {
        await userService.UpdateUser(userUpdated);
        user = await userService.GetUserByObjectId(id);
        EditMode = false;
    }




    //method that navigates to availableshifts page with userobjectid as parameter to be used in booking 
    //.. a shiftregistration 
    private void NavigateToAvailableShifts()
    {
        navigationManager.NavigateTo($"/availableshifts?id={id}");
    }




}